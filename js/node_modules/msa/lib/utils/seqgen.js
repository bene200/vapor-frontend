// Generated by CoffeeScript 1.9.2
var BMath, Sequence, Stat, seqgen;

Sequence = require("biojs-model").seq;

BMath = require("./bmath");

Stat = require("stat.seqs");

seqgen = module.exports = {
  _generateSequence: function(len) {
    var i, k, ref, text;
    text = "";
    for (i = k = 0, ref = len - 1; k <= ref; i = k += 1) {
      text += seqgen.getRandomChar();
    }
    return text;
  },
  getDummySequences: function(len, seqLen) {
    var i, k, ref, seqs;
    seqs = [];
    if (len == null) {
      len = BMath.getRandomInt(3, 5);
    }
    if (seqLen == null) {
      seqLen = BMath.getRandomInt(50, 200);
    }
    for (i = k = 1, ref = len; k <= ref; i = k += 1) {
      seqs.push(new Sequence(seqgen._generateSequence(seqLen), "seq" + i, "r" + i));
    }
    return seqs;
  },
  getRandomChar: function(dict) {
    var possible;
    possible = dict || "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    return possible.charAt(Math.floor(Math.random() * possible.length));
  },
  genConservedSequences: function(len, seqLen, dict) {
    var c, cConserv, conservAim, counter, i, j, k, l, m, n, observed, pseqs, ref, ref1, ref2, ref3, seqs, tolerance;
    seqs = [];
    if (len == null) {
      len = BMath.getRandomInt(3, 5);
    }
    if (seqLen == null) {
      seqLen = BMath.getRandomInt(50, 200);
    }
    dict = dict || "ACDEFGHIKLMNPQRSTVWY---";
    for (i = k = 1, ref = len; k <= ref; i = k += 1) {
      seqs[i - 1] = "";
    }
    tolerance = 0.2;
    conservAim = 1;
    for (i = l = 0, ref1 = seqLen - 1; l <= ref1; i = l += 1) {
      if (i % 3 === 0) {
        conservAim = (BMath.getRandomInt(50, 100)) / 100;
      }
      observed = [];
      for (j = m = 0, ref2 = len - 1; m <= ref2; j = m += 1) {
        counter = 0;
        while (counter < 100) {
          c = seqgen.getRandomChar(dict);
          cConserv = Stat(observed);
          cConserv.addSeq(c);
          counter++;
          if (Math.abs(conservAim - cConserv.scale(cConserv.conservation())[0]) < tolerance) {
            break;
          }
        }
        seqs[j] += c;
        observed.push(c);
      }
    }
    pseqs = [];
    for (i = n = 1, ref3 = len; n <= ref3; i = n += 1) {
      pseqs.push(new Sequence(seqs[i - 1], "seq" + i, "r" + i));
    }
    return pseqs;
  }
};
